import{r as g,j as e}from"./index-CWXJLjJA.js";import{u as p}from"./useQuery-J4Kg31OB.js";import{D as x}from"./DescriptionBox-Cjsxsok8.js";import"./useBaseQuery-DmLDYRcB.js";const d=50,h=10,u=async(n=1)=>{console.log(`Fetching page: ${n}`),await new Promise(r=>setTimeout(r,750));const i=(n-1)*h,s=i+h,c=Array.from({length:d},(r,l)=>`Item ${l+1}`).slice(i,s),o=s<d;return{items:c,hasMore:o,totalItems:d}},j="_container_2mawz_1",_="_descriptionColumn_2mawz_25",w="_exampleColumn_2mawz_35",T="_heading_2mawz_51",f="_itemList_2mawz_65",P="_item_2mawz_65",b="_paginationControls_2mawz_95",y="_button_2mawz_111",N="_pageInfo_2mawz_153",v="_loadingText_2mawz_163",C="_errorText_2mawz_179",a={container:j,descriptionColumn:_,exampleColumn:w,heading:T,itemList:f,item:P,paginationControls:b,button:y,pageInfo:N,loadingText:v,errorText:C},L=()=>{const[n,i]=g.useState(1),{data:s,error:c,isFetching:o,isPlaceholderData:r,isLoading:l}=p({queryKey:["paginatedData",n],queryFn:()=>u(n),placeholderData:t=>t,staleTime:5*60*1e3}),m=s?Math.ceil(s.totalItems/10):0;return e.jsxs("div",{className:a.container,children:[e.jsx("div",{className:a.descriptionColumn,children:e.jsxs(x,{title:"Pagination with useQuery and placeholderData",children:[e.jsxs("p",{children:["This example shows how to implement pagination using"," ",e.jsx("code",{children:"useQuery"}),"."]}),e.jsxs("ul",{children:[e.jsxs("li",{children:["The current ",e.jsx("code",{children:"page"})," number is included in the ",e.jsx("code",{children:"queryKey"})," (",e.jsx("code",{children:"['paginatedData', page]"}),"). This makes Tanstack Query cache the data for each page separately."]}),e.jsxs("li",{children:[e.jsx("code",{children:"placeholderData"})," is used (previously"," ",e.jsx("code",{children:"keepPreviousData"}),"). When fetching a new page, Tanstack Query keeps displaying the data from the ",e.jsx("em",{children:"previous"})," page until the new data arrives. This prevents the UI from jumping to a loading state and provides a smoother experience."]}),e.jsxs("li",{children:[e.jsx("code",{children:"isPlaceholderData"}),' becomes true when placeholder data is being shown while new data is loading in the background. We use this to disable the "Next Page" button during that time.']}),e.jsxs("li",{children:[e.jsx("code",{children:"isFetching"}),' indicates when a fetch is happening (either initial or background refetch), used here to show "(Updating...)".']})]})]})}),e.jsxs("div",{className:a.exampleColumn,children:[e.jsx("h1",{className:a.heading,children:"Pagination Example"}),l&&e.jsx("div",{className:a.loadingText,children:"Loading data..."}),c instanceof Error&&e.jsxs("div",{className:a.errorText,children:["Error: ",c.message]}),s?e.jsxs(e.Fragment,{children:[e.jsx("ul",{className:a.itemList,children:s.items.map(t=>e.jsx("li",{className:a.item,children:t},t))}),e.jsxs("div",{className:a.paginationControls,children:[e.jsx("button",{onClick:()=>i(t=>Math.max(t-1,1)),disabled:n===1,className:a.button,children:"Previous Page"}),e.jsxs("span",{className:a.pageInfo,children:["Page ",n," of ",m," ",o?"(Updating...)":""]}),e.jsx("button",{onClick:()=>i(t=>s!=null&&s.hasMore?t+1:t),disabled:r||!(s!=null&&s.hasMore),className:a.button,children:"Next Page"})]}),o&&!r&&e.jsx("div",{className:a.loadingText,children:"Fetching next page..."})]}):!o&&e.jsx("div",{className:a.loadingText,children:"Loading initial data..."})]})]})};export{L as PaginationExample};
