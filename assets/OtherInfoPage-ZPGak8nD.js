import{j as e}from"./index-CWXJLjJA.js";const n="_container_1oz3n_1",r="_heading_1oz3n_13",s="_infoCard_1oz3n_31",i={container:n,heading:r,infoCard:s},t=()=>e.jsxs("div",{className:i.infoCard,children:[e.jsx("h3",{children:"Automatic Retries on Failure"}),e.jsxs("p",{children:["A helpful default behavior in Tanstack Query (specifically for"," ",e.jsx("code",{children:"useQuery"}),") is its automatic retry mechanism."]}),e.jsxs("p",{children:["If a query function fails (e.g., due to a network error or a server-side issue that throws an error), Tanstack Query won't immediately give up and return the error state. Instead, it will automatically retry the query function ",e.jsx("strong",{children:"3 times"})," ","by default, with a brief, increasing delay between attempts."]}),e.jsxs("p",{children:["Only after these default retries have failed will the query transition to the ",e.jsx("code",{children:"error"})," status."]}),e.jsxs("p",{children:["This default behavior can often handle transient network issues without requiring manual intervention. You can configure the number of retries (or disable it entirely) using the"," ",e.jsx("code",{children:"retry"})," option in ",e.jsx("code",{children:"useQuery"}),":"]}),e.jsxs("ul",{children:[e.jsxs("li",{children:[e.jsx("code",{children:"retry: 5"})," - Retry 5 times."]}),e.jsxs("li",{children:[e.jsx("code",{children:"retry: false"})," - Disable retries."]}),e.jsxs("li",{children:[e.jsx("code",{children:"retry: (failureCount, error) => { return failureCount < 2; }"})," ","- Custom retry logic based on count or error type."]})]})]}),c=()=>e.jsxs("div",{className:i.infoCard,children:[e.jsxs("h2",{children:[e.jsx("code",{children:"isLoading"})," vs ",e.jsx("code",{children:"isFetching"})]}),e.jsx("br",{}),e.jsxs("h3",{children:["1. ",e.jsx("code",{children:"isLoading"})]}),e.jsxs("p",{children:[e.jsx("strong",{children:"Definition:"})," Indicates the query is fetching and has ",e.jsx("strong",{children:"no data yet"}),". True when the query makes its"," ",e.jsx("strong",{children:"first fetch"})," with no cached data."]}),e.jsxs("ul",{children:[e.jsxs("li",{children:[e.jsx("strong",{children:"When true:"})," Initial fetch, no data in cache (e.g., first render)."]}),e.jsxs("li",{children:[e.jsx("strong",{children:"When false:"})," Data is available (even if refetching)."]}),e.jsxs("li",{children:[e.jsx("strong",{children:"Use Case:"})," Show loading spinner or placeholder UI when no data exists."]})]}),e.jsx("br",{}),e.jsxs("h3",{children:["2. ",e.jsx("code",{children:"isFetching"})]}),e.jsxs("p",{children:[e.jsx("strong",{children:"Definition:"})," Indicates the query is"," ",e.jsx("strong",{children:"actively fetching"}),", including initial fetches and background refetches."]}),e.jsxs("ul",{children:[e.jsxs("li",{children:[e.jsx("strong",{children:"When true:"})," During initial fetch or background refetch (e.g., window refocus, manual refetch)."]}),e.jsxs("li",{children:[e.jsx("strong",{children:"When false:"})," No active network request."]}),e.jsxs("li",{children:[e.jsx("strong",{children:"Use Case:"})," Show subtle UI updates (e.g., refresh indicator) during fetches."]})]}),e.jsx("br",{}),e.jsx("h3",{children:"Key Differences"}),e.jsxs("table",{children:[e.jsx("thead",{children:e.jsxs("tr",{children:[e.jsx("th",{children:"Aspect"}),e.jsx("th",{children:e.jsx("code",{children:"isLoading"})}),e.jsx("th",{children:e.jsx("code",{children:"isFetching"})})]})}),e.jsxs("tbody",{children:[e.jsxs("tr",{children:[e.jsx("td",{children:e.jsx("strong",{children:"Definition"})}),e.jsx("td",{children:"Query is fetching, no data yet."}),e.jsx("td",{children:"Query is actively fetching."})]}),e.jsxs("tr",{children:[e.jsx("td",{children:e.jsx("strong",{children:"Scope"})}),e.jsx("td",{children:"Only initial fetch, no cache."}),e.jsx("td",{children:"Any fetch (initial or refetch)."})]}),e.jsxs("tr",{children:[e.jsx("td",{children:e.jsx("strong",{children:"Data Available"})}),e.jsx("td",{children:"No data in cache."}),e.jsx("td",{children:"Data may be in cache."})]}),e.jsxs("tr",{children:[e.jsx("td",{children:e.jsx("strong",{children:"Use Case"})}),e.jsx("td",{children:"Full loading UI (e.g., spinner)."}),e.jsx("td",{children:"Ongoing fetch indicator."})]}),e.jsxs("tr",{children:[e.jsx("td",{children:e.jsx("strong",{children:"Example"})}),e.jsx("td",{children:"True on first render, no cache."}),e.jsx("td",{children:"True during refetch, even with data."})]})]})]}),e.jsx("br",{}),e.jsx("h3",{children:"Summary"}),e.jsxs("p",{children:[e.jsx("code",{children:"isLoading"}),": Use for initial loading when no data is available.",e.jsx("br",{}),e.jsx("code",{children:"isFetching"}),": Use to track any active fetch, including background refetches."]})]}),h=()=>e.jsxs("div",{className:i.container,children:[e.jsx("h1",{className:i.heading,children:"Tanstack Query - Other Useful Info"}),e.jsx(t,{}),e.jsx(c,{})]});export{h as OtherInfoPage};
